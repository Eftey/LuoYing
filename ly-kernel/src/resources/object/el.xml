<?xml version="1.0" encoding="UTF-8"?>

<root
    xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
    xmlns='http://luoying.huliqing.name'
    xsi:schemaLocation='http://luoying.huliqing.name meta/el.xsd'>
    
    <!--=====================================================================-->
    <!--角色经验公式:配置给角色，计算角色在升到指定等级时需要的经验值。即表示从
    等级 leve - 1 升级到 level 时需要的经验值。-->
    <!--=====================================================================-->
    
    <!--默认升级公式-->
    <elLevel  id="elLevelUp" expression="0 + 50 * Math.pow(1.2, {level})" />
    
    <!--=====================================================================-->
    <!--DropAttribute掉落公式, 配置给Drop，用于指定当角色死亡后可以掉落的属性值。
    {s_level}为源角色等级（死亡的角色), {t_level}为目标角色，即获得获励的角色等级
    一般为攻击者角色。-->
    <!--=====================================================================-->
    
    <!--默认公式-->
    <elAttribute id="elAttributeDropXp" expression="(({s_attributeLevel} + 1) / ({t_attributeLevel} + 1)) * (0 + 12 * Math.pow(1.1, {s_attributeLevel}))" />

    <!--=====================================================================-->
    <!--属性值等级公式: 配置给属性，用于计算属性在指定等级时的属性值。-->
    <!--=====================================================================-->
    
    <!--生命值和魔法值-->
    <elLevel id="elLevelAttrHealth"             expression="-60 + 120 * Math.pow(1.1,  {level})" />
    <elLevel id="elLevelAttrMana"               expression="-60 + 120  * Math.pow(1.05, {level})" />
    <!--物理攻击-->
    <elLevel id="elLevelAttrAttack"             expression="-45 + 50 * Math.pow(1.06, {level})" />
    <!--魔法攻击力-->
    <elLevel id="elLevelAttrMagicAttack"        expression="-45 + 50 * Math.pow(1.06, {level})" />
    <!--物理防御-->
    <elLevel id="elLevelAttrDefence"            expression="-20 + 25 * Math.pow(1.05, {level})" />
    <!--魔法防御-->
    <elLevel id="elLevelAttrMagicDefence"       expression="-20 + 25 * Math.pow(1.05, {level})" />
    <!--角色视力，影响搜查敌人的范围-->
    <elLevel id="elLevelAttrVision"             expression="30" />
    <!--每秒生命/魔法恢复量公式-->
    <elLevel id="elLevelAttrHealthRestore"      expression="1.5" />
    <elLevel id="elLevelAttrManaRestore"        expression="1.5" />
    <!--攻击速度,1为正常速度-->
    <elLevel id="elLevelAttrAttackSpeed"        expression="1" />
    <!--攻击速度,1为正常速度-->
    <elLevel id="elLevelAttrMagicSpeed"         expression="1" />
    <!--移动速度，1为正常速度-->
    <elLevel id="elLevelAttrMoveSpeed"          expression="1" />
    <!--防御率和躲闪率，取值[0.0~1.0],1为100防守-->
    <elLevel id="elLevelAttrDefenceRate"        expression="{level} / 60" />
    <elLevel id="elLevelAttrDuckRate"           expression="{level} / 60" />
    <!--鬼魅能力,取值[0.0~1.0]-->
    <elLevel id="elLevelAttrGhostRate"          expression="{level} / 60" />
    
    <!--=====================================================================-->
    <!--天赋等级公式：配置给角色，这表示当角色升到某个指定等级时可获得的点数。-->
    <!--=====================================================================-->
    
    <!--默认公式-->
    <elLevel id="elLevelTalentPoints" expression="calTalentPoints({level})" />
    
    <!--=====================================================================-->
    <!--天赋属性公式:配置给天赋使用，配置各种天赋的等级值,指定各种天赋在达到指
    定等级时可产生的作用值。-->
    <!--=====================================================================-->
    
    <elLevel id="elLevelTalentLifeRestore"  expression="{level}" />
    <elLevel id="elLevelTalentManaRestore"  expression="{level} * 2" />
    <elLevel id="elLevelTalentDefence"      expression="{level} * 2 + 2 * Math.pow(1.06, {level})" />
    <elLevel id="elLevelTalentMagicDefence" expression="{level} * 2 + 2 * Math.pow(1.06, {level})" />
    <elLevel id="elLevelTalentAttack"       expression="{level} * 2 + 3 * Math.pow(1.06, {level})" />
    <elLevel id="elLevelTalentMagicAttack"  expression="{level} * 2 + 3 * Math.pow(1.06, {level})" />
    <elLevel id="elLevelTalentVision"       expression="{level}" />
    <elLevel id="elLevelTalentMoveSpeed"    expression="{level} * 0.04" />
    
    <!--=====================================================================-->
    <!--技能升级公式:配置给技能，计算技能在升到指定等级时需要的技能点数（熟练度）。
    即表示从等级 leve - 1 升级到 level 时需要的技能点数-->
    <!--=====================================================================-->
    
    <!--默认公式-->
    <elLevel  id="elLevelUpSkill" expression="10 * {level}" />
    
    <!--=====================================================================-->
    <!-- 技能等级公式，为每个技能计算一个等级值。这个等级值由技能使用，根据不同类
    型的技能可能应用情况不一样。-->
    <!--=====================================================================-->
    <elLevel id="elLevelSkill" expression="1 + 0.2 * ({level} - 1)" />
    
    
    <!--=====================================================================-->
    <!--技能伤害公式: 配置给技能，用于计算技能可以造成的伤害值。-->
    <!--=====================================================================-->
    
    <!--默认物理伤害-->
    <elHit id="elSkillAttack" expression="calAttack({s_attributeAttack},{sk_value},{t_attributeDefence})" />
    <!--默认魔法伤害-->
    <elHit id="elSkillMagicAttack" expression="calAttack({s_attributeMagicAttack},{sk_value},{t_attributeMagicDefence})" />
    <!--绝对攻击，忽略属性影响-->
    <elHit id="elSkillAbsoluteAttack" expression="-{sk_value}" />
    <!--技能增加效果-->
    <elHit id="elSkillBuff" expression="{sk_value}" />
    
    <!--=====================================================================-->
    <!--Function-->
    <!--=====================================================================-->
    <script>
        <![CDATA[
        // 计算天赋点数
        function calTalentPoints(level) {
            if (level <= 20) return 1;
            if (level <= 40) return 2;
            return 3;
        }
        // 计算攻击伤害值，这里返回的是负值，比如10点伤害，则返回-10
        function calAttack(attack, skValue, defence) {
            var value = attack + skValue - defence;
            if (value <= 0) {
                return 0;
            } else {
                return value * -1;
            }
        }
        ]]>
    </script>
    
    
</root>



