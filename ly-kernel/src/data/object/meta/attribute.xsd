<?xml version="1.0"?>
<!--
xs:string
xs:decimal
xs:integer
xs:boolean
xs:date
xs:time
-->

<xs:schema version="1.0"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://fighter.huliqing.name"
           xmlns="http://fighter.huliqing.name"
           elementFormDefault="qualified">
    
    <xs:include schemaLocation="base.xsd" />
    
    <xs:element name="root">
        <xs:complexType>
            <xs:all>
                <xs:element ref="attributeBoolean" />
                <xs:element ref="attributeFloat" />
                <xs:element ref="attributeGroup" />
                <xs:element ref="attributeInteger" />
                <xs:element ref="attributeLevelFloat" />
                <xs:element ref="attributeLevelInteger" />
                <xs:element ref="attributeLimitInteger" />
                <xs:element ref="attributeLong" />
                <xs:element ref="attributeString" />
            </xs:all>
        </xs:complexType>
    </xs:element>
            
    <xs:element name="attributeFloat" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:decimals" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, 可以是float或int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeInteger" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值，必须是int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLong" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, long或int</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="attributeString" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:string" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, String类型</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeBoolean" >
        <xs:annotation>
            <xs:documentation>整数类型的属性</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="bool" >
                        <xs:annotation><xs:documentation>属性初始值</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    <xs:element name="attributeLevelFloat" >
        <xs:annotation>
            <xs:documentation>可以设置等级的属性,这种属性可以随着等级而改变属性值。</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:decimals" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="level" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性的初始等级，默认"1"</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="levelEl" type="xs:string" use="optional" >
                        <xs:annotation>
                            <xs:documentation>
                                绑定一个等级类型的计算公式(el id), 必须是 level 类型的el. 属性通过这个el公式来计算属性的等级值。
                                如果没有设置这个公式，则设置属性的等级将没有意义。
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLevelInteger" >
        <xs:annotation>
            <xs:documentation>可以设置等级的属性,这种属性可以随着等级而改变属性值。</xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="level" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>属性的初始等级，默认"1"</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="levelEl" type="xs:string" use="optional" >
                        <xs:annotation>
                            <xs:documentation>
                                绑定一个等级类型的计算公式(el id), 必须是 level 类型的el. 属性通过这个el公式来计算属性的等级值。
                                如果没有设置这个公式，则设置属性的等级将没有意义。
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeLimitInteger" >
        <xs:annotation>
            <xs:documentation>可以限制取值范围的属性，这种属性可以通过设置minValue,maxValue或绑定一个
                其它属性来限制当前属性的取值范围。
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="value" type="xs:decimals" use="optional" >
                        <xs:annotation><xs:documentation>属性初始值, int值.</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minValue" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>最小值限制，int类型，如果设置了minLimitAttributeName则minValue将会被忽略</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="maxValue" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>最大值限制，int类型，如果设置了maxLimitAttributeName则maxValue将会被忽略</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="minLimitAttributeName" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>绑定一个属性"名称", 用这个属性的值来限制当前属性值的最小值。如果设置了这个值，则minValue的设置将会被忽略。</xs:documentation></xs:annotation>
                    </xs:attribute>
                    <xs:attribute name="maxLimitAttributeName" type="xs:integer" use="optional" >
                        <xs:annotation><xs:documentation>绑定一个属性"名称", 用这个属性的值来限制当前属性值的最大值。如果设置了这个值，则maxValue的设置将会被忽略。</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
    <xs:element name="attributeGroup" >
        <xs:annotation>
            <xs:documentation>
                属性组
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="attributes" type="xs:string" use="required" >
                        <xs:annotation><xs:documentation>添加其它属性ID, 格式："attributeId1,attributeId2,..."</xs:documentation></xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>
    
<!--    <xs:element name="attributeReplacer" >
        <xs:annotation>
            <xs:documentation>ReplacerAttribute属性与GroupAttribute相似，可以将一系列的属性打包成一个属性组，
                区别是这个属性组中的所有属性在载入时都会偿试去替换掉原有的属性，替换的时候是根据属性"名称"来进行替换的。
                当ReplaceAttribute在载入一个子属性时会去判断角色是否已经存在了一个相同名称的子属性，
                如果已经存在则移除旧的，并将新的属性替换进去。
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:complexContent>
                <xs:extension base="attributeBase">
                    <xs:attribute name="attributes" type="xs:string" use="required" >
                        <xs:annotation>
                            <xs:documentation>
                                添加一些需要用于替换掉角色属性的属性。格式："attributeId1,attributeId2,..."
                            </xs:documentation>
                        </xs:annotation>
                    </xs:attribute>
                </xs:extension>
            </xs:complexContent>
        </xs:complexType>
    </xs:element>-->
                    
    <xs:complexType name="attributeBase">
        <xs:complexContent>
            <xs:extension base="base">
                <xs:attribute name="name" type="xs:string" use="required" >
                    <xs:annotation>
                        <xs:documentation>
                            属性名称,每个属性都需要一个名称。
                        </xs:documentation>
                    </xs:annotation>
                </xs:attribute>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
</xs:schema>
